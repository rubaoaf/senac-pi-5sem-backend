const sha256 = require('crypto-js/sha256');

const models = require('../database/models');

const cadastraAgendamento = async (req, res) => {
    try {
        const scheduling = await models.Agendamento.create(req.body); 
        res.status(201).json(scheduling)
    }
    catch (error) {
        const scheduling_obj = Object.keys(models.Agendamento.rawAttributes)

        .filter(key => !models.Agendamento.rawAttributes[key]._autoGenerated)
        .map(key => {
            return {
                field: models.Agendamento.rawAttributes[key].fild,
                type: models.Agendamento.rawAttributes[key].type.key,
                optional: models.Agendamento.rawAttributes[key].allowNull !== false
            }
        })
        if (error instanceof models.Sequelize.DatabaseError) {
            res.status(400).json({
                error: error.message,
                expected_json: scheduling_obj
            });
        } else {
            throw new Error('Server error')
        }
    }
}

const listaAgendamentos = async (req, res) => {
    const userId = req.params.userId;
    const scheduling = await models.Agendamento.findAll({
      where: {
          idUsuario: userId,
          ativo: true
      }
    });

    if(!res) {
        res.status(404).send(new Error('Não encontrado'))
    } else {
        res.json({scheduling})
    }
}

const removeAgendamento = async (req, res) => {
    const schedulingId = req.params.schedulingId;
    const deleted_schudeling = await models.Agendamento.destroy({
        where: {
            id: schedulingId
        }
    })
    if(deleted_schudeling) {
        res.status(204).send()
    }
    else {
        res.status(404).send(new Error( 'Não encontrado'))
    }
}

const alteraAgendamento = async (req, res) => {
    const schedulingId = req.params.schedulingId;
    const [ scheduling_edit ] = await models.Agendamento.update(
        req.body,
        {
            where: {
                id: schedulingId
            }
        }
    );
    if (scheduling_edit) {
        const editedScheduling = await models.Agendamento.findByPk(schedulingId);
        return res.status(200).json(editedScheduling);
    }
    return res.status(404).send(new Error('Agendamento não encontrado'))
}

const cadastraUsuario = async (req, res) => {
    try {
        const {senha, email} = req.body;
        const reqDefault = req.body
        const cyptoSenha = {senha: String(sha256(senha))};
        const checkEmail = await models.Usuario.findOne({
            email: email
        })
        if (!checkEmail) {
            const user = await models.Usuario.create({...reqDefault, ...cyptoSenha});
            res.status(201).json(user);    
        } else {
            res.status(400).json({message: 'Usuário já cadastrado'})
        }
    } catch (error) {
        const user_obj = Object.keys(models.Usuario.rawAttributes)

        .filter(key => !models.Usuario.rawAttributes[key]._autoGenerated)
        .map(key => {
            return {
                field: models.Usuario.rawAttributes[key].fild,
                type: models.Usuario.rawAttributes[key].type.key,
                optional: models.Usuario.rawAttributes[key].allowNull !== false
            }
        })
        if (error instanceof models.Sequelize.DatabaseError) {
            res.status(400).json({
                error: error.message,
                expected_json: user_obj
            });
        } else {
            throw new Error('Server error')
        }
        
    }
}

const alteraSenha = async (req, res) => {
    const userId = req.params.userId;
    const { senha } = req.body;
    const cyptoSenha = {senha: String(sha256(senha))};

    const [ user_edit ] = await models.Usuario.update(
        cyptoSenha,
        {
            where: {
                id: userId
            }
        }
    );
    if (user_edit) {
        return res.status(200).json('Atualizado com sucesso');
    }
    return res.status(404).send(new Error('Usuario não encontrado'));
}

const alteraUsuario = async (req, res) => {
    const userId = req.params.userId;
    const reqDefault = req.body
    const { senha } = req.body;
    const cyptoSenha = {senha: String(sha256(senha))};

    const [ user_edit ] = await models.Usuario.update(
        {...reqDefault, ...cyptoSenha},
        {
            where: {
                id: userId
            }
        }
    );
    if (user_edit) {
        return res.status(200).json('Atualizado com sucesso');
    }
    return res.status(404).send(new Error('Usuario não encontrado'));
}

const loginUsuario = async (req, res, next) => {
    try {
        const { email, senha } = req.body;
        const user = await models.Usuario.findOne({
            where: {
                email: email            }
        });
        if(user) {
            const validPass = String(sha256(senha)) === user.senha;
            if(validPass) {
                return res.status(200).json({id: user.id, nomeCompleto: user.nomeCompleto});
            }
            return res.status(401).json('Usuário ou senha invalida');
        }

    } catch (error) {
        throw new Error('Server error')

    }
}

const validaUsuario = async (req, res, next) => {
    try {
        const { email } = req.body;
        const user = await models.Usuario.findOne({
            where: {
                email: email            }
        });
        if(user) {
            return res.status(200).json({id: user.id});
        } else {
            return res.status(404).json('Usuário não encontrado');
        }
    } catch (error) {
        throw new Error('Server error')

    }
}

module.exports = {
    cadastraAgendamento,
    listaAgendamentos,
    removeAgendamento,
    alteraAgendamento,
    cadastraUsuario,
    alteraUsuario,
    loginUsuario,
    validaUsuario,
    alteraSenha
}
