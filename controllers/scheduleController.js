const models = require('../database/models');

const cadastraAgendamento = async (req, res) => {
    try {
        const scheduling = await models.Agendamento.create(req.body); 
        res.status(201).json(scheduling)
    }
    catch (error) {
        const scheduling_obj = Object.keys(models.Agendamento.rawAttributes)

        .filter(key => !models.Agendamento.rawAttributes[key]._autoGenerated)
        .map(key => {
            return {
                field: models.Agendamento.rawAttributes[key].fild,
                type: models.Agendamento.rawAttributes[key].type.key,
                optional: models.Agendamento.rawAttributes[key].allowNull !== false
            }
        })
        if (error instanceof models.Sequelize.DatabaseError) {
            res.status(400).json({
                error: error.message,
                expected_json: scheduling_obj
            });
        } else {
            throw new Error('Server error')
        }
    }
}

const listaAgendamentos = async (req, res) => {
    const userId = req.params.userId;
    const scheduling = await models.Agendamento.findAll({
      where: {
          idUsuario: userId,
          ativo: true
      }
    });

    if(!res) {
        res.status(404).send(new Error('Não encontrado'))
    } else {
        res.json({scheduling})
    }
}

const removeAgendamento = async (req, res) => {
    const schedulingId = req.params.schedulingId;
    const deleted_schudeling = await models.Agendamento.destroy({
        where: {
            id: schedulingId
        }
    })
    if(deleted_schudeling) {
        res.status(204).send()
    }
    else {
        res.status(404).send(new Error( 'Não encontrado'))
    }
}

const alteraAgendamento = async (req, res) => {
    const schedulingId = req.params.schedulingId;
    const [ scheduling_edit ] = await models.Agendamento.update(
        req.body,
        {
            where: {
                id: schedulingId
            }
        }
    );
    if (scheduling_edit) {
        const editedScheduling = await models.Agendamento.findByPk(schedulingId);
        return res.status(200).json(editedScheduling);
    }
    return res.status(404).send(new Error('Agendamento não encontrado'))
}

module.exports = {
    cadastraAgendamento,
    listaAgendamentos,
    removeAgendamento,
    alteraAgendamento,

}